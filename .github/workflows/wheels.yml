name: Build wheels

on:
  # only run on new releases/tags
  release:
    types: [published]
  # Manual run
  workflow_dispatch:

# ensure only a single job is running
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  build_wheels:
    name: Build wheel for cp${{ matrix.python }}-${{ matrix.platform[1] }}
    runs-on: ${{ matrix.platform[0] }}

    strategy:
      fail-fast: false
      matrix:
        python: [36, 37, 38, 39, 310, 311]
        platform:
          # Windows 32-bit
          - [windows-latest, win32]
          # Windows 64-bit
          - [windows-latest, win_amd64]
          # Linux 32-bit
          - [ubuntu-latest, manylinux_i686]
          # Linux 64-bit
          - [ubuntu-latest, manylinux_x86_64]
          # macOS on Intel 64-bit
          - [macos-latest, macosx_x86_64]
          # macOS on Apple M1 64-bit
          - [macos-latest, macosx_arm64]

        exclude:
          # exclude python versions < 3.8 for macOS Apple Silicon
          - platform: [macos-latest, macosx_arm64]
            python: 36
          - platform: [macos-latest, macosx_arm64]
            python: 37
        
        # add arch configurations to macosx entries
        include:
          - platform: [macos-latest, macosx_x86_64]
            arch: x86_64
          - platform: [macos-latest, macosx_arm64]
            arch: arm64

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - name: Install Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.x'

      # setup MSVC (Windows)
      - name: Set up MSVC x86
        if: matrix.platform[1] == 'win32'
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x86
      - name: Set up MSVC x64
        if: matrix.platform[1] == 'win_amd64'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Install cibuildwheel
        run: |
          python -m pip install --upgrade pip
          python -m pip install cibuildwheel==2.11.4

      # https://cibuildwheel.readthedocs.io/en/stable/
      # https://github.com/pypa/cibuildwheel
      - name: Build wheels
        # to supply options, put them in 'env', like:
        env:
          CIBW_BUILD: cp${{ matrix.python }}-${{ matrix.platform[1] }}
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
          CIBW_MANYLINUX_I686_IMAGE: manylinux2014
          CIBW_ARCHS_MACOS: ${{ matrix.arch }}
          CIBW_TEST_SKIP: "*-macosx_arm64"

          # Include latest Python beta
          CIBW_PRERELEASE_PYTHONS: True

          CIBW_TEST_COMMAND: python -c "import eikonalfm"

        run: python -m cibuildwheel --output-dir wheelhouse

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      
      - name: Build sdist
        run: pipx run build --sdist

      - name: Check README rendering for PyPI
        run: |
          python -m pip install twine
          twine check dist/*
      
      - uses: actions/upload-artifact@v3
        with:
          # name: sdist
          path: ./dist/*.tar.gz

  upload_pypi:
    needs: ["build_wheels", "build_sdist"]
    runs-on: ubuntu-latest

    steps:
    - uses: actions/download-artifact@v4.1.7
      with:
        # unpacks default artifact into dist/
        name: artifact
        path: dist

    - uses: pypa/gh-action-pypi-publish@v1.5.0
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
